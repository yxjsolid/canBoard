C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include  "stdio.h"
   2          #include  "string.h"
   3          #include  "intrins.h"
   4          //#include "AT89X51.H"
   5          #include "reg51.h"
   6          void CAN_Send_anylength(unsigned char *CAN_TX_Buf,unsigned char length1);
   7          //定义SJA1000的基址
   8          
   9          #define SJA_BaseAdr  0X7F00
  10          
  11          // 控制寄存器
  12          
  13          #define         REG_CONTROL       SJA_BaseAdr+0x00       //内部控制寄存器
  14          #define         REG_COMMAND       SJA_BaseAdr+0x01       //命令寄存器
  15          #define         REG_STATUS        SJA_BaseAdr+0x02       //状态寄存器
  16          #define         REG_INTERRUPT     SJA_BaseAdr+0x03       //中断寄存器
  17          #define         REG_INTENABLE     SJA_BaseAdr+0x04       //中断使能寄存器
  18          #define         REG_BTR0          SJA_BaseAdr+0x06       //总线定时寄存器0
  19          #define         REG_BTR1          SJA_BaseAdr+0x07       //总线定时寄存器1
  20          #define         REG_OCR           SJA_BaseAdr+0x08       //输出控制寄存器
  21          #define         REG_TEST          SJA_BaseAdr+0x09       //测试寄存器
  22          
  23          #define         REG_RESVER1       SJA_BaseAdr+0x0A       //保留1
  24          #define         REG_ARBITRATE     SJA_BaseAdr+0x0B       //仲裁丢失捕捉
  25          #define         REG_ERRCATCH      SJA_BaseAdr+0x0C       //错误代码捕捉
  26          #define         REG_ERRLIMIT      SJA_BaseAdr+0x0D       //错误报警限额
  27          
  28          #define         REG_RXERR         SJA_BaseAdr+0x0E         //接收错误计数器
  29          #define         REG_TXERR         SJA_BaseAdr+0x0F         //发送错误计数器
  30          
  31          #define         REG_ACR1          SJA_BaseAdr+0x10       //验收代码寄存器
  32          #define         REG_ACR2          SJA_BaseAdr+0x11       //验收代码寄存器
  33          #define         REG_ACR3          SJA_BaseAdr+0x12       //验收代码寄存器
  34          #define         REG_ACR4          SJA_BaseAdr+0x13       //验收代码寄存器
  35          #define         REG_AMR1          SJA_BaseAdr+0x14       //验收屏蔽寄存器
  36          #define         REG_AMR2          SJA_BaseAdr+0x15       //验收屏蔽寄存器
  37          #define         REG_AMR3          SJA_BaseAdr+0x16       //验收屏蔽寄存器
  38          #define         REG_AMR4          SJA_BaseAdr+0x17       //验收屏蔽寄存器
  39          
  40          // 发送缓冲区寄存器
  41          #define         REG_TXBuffer1     SJA_BaseAdr+0x10         //发送缓冲区1
  42          #define         REG_TXBuffer2     SJA_BaseAdr+0x11         //发送缓冲区2
  43          #define         REG_TXBuffer3     SJA_BaseAdr+0x12         //发送缓冲区3
  44          #define         REG_TXBuffer4     SJA_BaseAdr+0x13         //发送缓冲区4
  45          #define         REG_TXBuffer5     SJA_BaseAdr+0x14         //发送缓冲区5
  46          #define         REG_TXBuffer6     SJA_BaseAdr+0x15         //发送缓冲区6
  47          #define         REG_TXBuffer7     SJA_BaseAdr+0x16         //发送缓冲区7
  48          #define         REG_TXBuffer8     SJA_BaseAdr+0x17         //发送缓冲区8
  49          #define         REG_TXBuffer9     SJA_BaseAdr+0x18         //发送缓冲区9
  50          #define         REG_TXBuffer10    SJA_BaseAdr+0x19         //发送缓冲区10
  51          #define         REG_TXBuffer11    SJA_BaseAdr+0x1A         //发送缓冲区11
  52          #define         REG_TXBuffer12    SJA_BaseAdr+0x1B         //发送缓冲区12
  53          #define         REG_TXBuffer13    SJA_BaseAdr+0x1C         //发送缓冲区13
  54          
  55          // 接收缓冲区寄存器
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 2   

  56          #define         REG_RXBuffer1       SJA_BaseAdr+0x10       //接收缓冲区1
  57          #define         REG_RXBuffer2       SJA_BaseAdr+0x11       //接收缓冲区2
  58          #define         REG_RXBuffer3      SJA_BaseAdr+0x12        //接收缓冲区3
  59          #define         REG_RXBuffer4       SJA_BaseAdr+0x13       //接收缓冲区4
  60          #define         REG_RXBuffer5      SJA_BaseAdr+0x14        //接收缓冲区5
  61          #define         REG_RXBuffer6     SJA_BaseAdr+0x15         //接收缓冲区6
  62          #define         REG_RXBuffer7     SJA_BaseAdr+0x16         //接收缓冲区7
  63          #define         REG_RXBuffer8     SJA_BaseAdr+0x17         //接收缓冲区8
  64          #define         REG_RXBuffer9     SJA_BaseAdr+0x18         //接收缓冲区9
  65          #define         REG_RXBuffer10     SJA_BaseAdr+0x19        //接收缓冲区10
  66          #define         REG_RXBuffer11     SJA_BaseAdr+0x1A        //接收缓冲区11
  67          #define         REG_RXBuffer12     SJA_BaseAdr+0x1B        //接收缓冲区12
  68          #define         REG_RXBuffer13     SJA_BaseAdr+0x1C        //接收缓冲区13
  69          
  70          #define         REG_RXCOUNT       SJA_BaseAdr+0x1D         //RX报文计数器
  71          #define         REG_RBSA          SJA_BaseAdr+0x1E         //接收缓冲区起始地址
  72          #define         REG_CDR           SJA_BaseAdr+0x1F         //时钟分频寄存器
  73          //功能说明:   CAN控制器SJA1000通讯波特率.SJA1000的晶振为必须为24MHZ*/
  74          #define         BTR0_Rate_10k      0xEF          //20KBPS的预设值
  75          #define         BTR1_Rate_10k      0xFF          //20KBPS的预设值
  76          
  77          /*
  78          功能说明:   CAN控制器SJA1000通讯波特率.SJA1000的晶振为必须为16MHZ*/
  79          
  80          
  81          #define         BTR0_Rate_5k      0xBF          //5KBPS的预设值
  82          #define         BTR1_Rate_5k      0xFF          //5KBPS的预设值
  83          
  84          #define         BTR0_Rate_10k      0x31          //10KBPS的预设值
*** WARNING C317 IN LINE 84 OF main.c: attempt to redefine macro 'BTR0_Rate_10k'
  85          #define         BTR1_Rate_10k      0x1C          //10KBPS的预设值
*** WARNING C317 IN LINE 85 OF main.c: attempt to redefine macro 'BTR1_Rate_10k'
  86          
  87          #define         BTR0_Rate_20k      0x18          //20KBPS的预设值
  88          #define         BTR1_Rate_20k      0x1C         //20KBPS的预设值
  89          
  90          #define         BTR0_Rate_40k      0x87          //40KBPS的预设值
  91          #define         BTR1_Rate_40k      0xFF          //40KBPS的预设值
  92          
  93          #define         BTR0_Rate_50k      0x47          //50KBPS的预设值
  94          #define         BTR1_Rate_50k      0x2F          //50KBPS的预设值
  95          
  96          #define         BTR0_Rate_80k      0x83          //80KBPS的预设值
  97          #define         BTR1_Rate_80k      0xFF          //80KBPS的预设值
  98          
  99          #define         BTR0_Rate_100k     0x43          //100KBPS的预设值
 100          #define         BTR1_Rate_100k     0x2f          //100KBPS的预设值
 101          
 102          #define         BTR0_Rate_125k     0x03          //125KBPS的预设值
 103          #define         BTR1_Rate_125k     0x1c          //125KBPS的预设值
 104          
 105          #define         BTR0_Rate_200k     0x81          //200KBPS的预设值
 106          #define         BTR1_Rate_200k     0xFA          //200KBPS的预设值
 107          
 108          #define         BTR0_Rate_250k     0x01          //250KBPS的预设值
 109          #define         BTR1_Rate_250k     0x1c          //250KBPS的预设值
 110          
 111          #define         BTR0_Rate_400k     0x80          //400KBPS的预设值
 112          #define         BTR1_Rate_400k     0xfa          //400KBPS的预设值
 113          
 114          #define         BTR0_Rate_500k     0x00          //500KBPS的预设值
 115          #define         BTR1_Rate_500k     0x1c          //500KBPS的预设值
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 3   

 116          
 117          #define         BTR0_Rate_666k     0x80          //666KBPS的预设值
 118          #define         BTR1_Rate_666k     0xb6          //666KBPS的预设值
 119          
 120          #define         BTR0_Rate_800k     0x00          //800KBPS的预设值
 121          #define         BTR1_Rate_800k     0x16          //800KBPS的预设值
 122          
 123          #define         BTR0_Rate_1000k    0x00          //1000KBPS的预设值
 124          #define         BTR1_Rate_1000k    0x14          //1000KBPS的预设值
 125          //BPS
 126          #define         ByteRate_5k        5
 127          #define         ByteRate_10k       10
 128          #define         ByteRate_20k       20
 129          #define         ByteRate_40k       40
 130          #define         ByteRate_50k       50
 131          #define         ByteRate_80k       80
 132          #define         ByteRate_100k      100
 133          #define         ByteRate_125k      125
 134          #define         ByteRate_200k      200
 135          #define         ByteRate_400k      400
 136          #define         ByteRate_500k      500
 137          #define         ByteRate_800k      800
 138          #define         ByteRate_1000k     1000
 139          
 140          //命令字
 141          #define    TR_CMD     0X01
 142          #define    AT_CMD     0X02
 143          #define    RRB_CMD    0X04
 144          #define    COS_CMD    0X08
 145          #define    SRR_CMD    0X10
 146          #define    GTS_CMD    0X10
 147          //错误字
 148          
 149          #define CAN_INTERFACE_OK      0
 150          #define CAN_BUS_OK            0
 151          #define CAN_INTERFACE_ERR     0XFF
 152          #define CAN_ENTERSET_ERR      0XFE
 153          #define CAN_QUITSET_ERR       0XFD
 154          #define CAN_INITOBJECT_ERR    0XFC
 155          #define CAN_INITBTR_ERR       0XFB
 156          #define CAN_INITOUTCTL_ERR    0XFA
 157          #define CAN_INTCLKDIV_ERR     0XF9
 158          #define CAN_BUS_ERR           0XF8
 159          
 160          //系统指针，指向SJA1000
 161          
 162          unsigned char xdata *SJA_BCANAdr;
 163          unsigned char data Tmod_data;
 164          unsigned char run_lamp_flush_count = 0;
 165          unsigned char run_lamp_flush_time = 10;
 166          sbit  run_lamp = P1^0;
 167          unsigned char data send_data[10],RevceData[10];
 168          //unsigned int data rxbuffer[10]={REG_RXBuffer1,REG_RXBuffer2,REG_RXBuffer3,REG_RXBuffer4,REG_RXBuffer5,RE
             -G_RXBuffer6,REG_RXBuffer7,REG_RXBuffer8,REG_RXBuffer9,REG_RXBuffer10};
 169          //unsigned int data txbuffer[10]={REG_TXBuffer1,REG_TXBuffer2,REG_TXBuffer3,REG_TXBuffer4,REG_TXBuffer5,RE
             -G_TXBuffer6,REG_TXBuffer7,REG_TXBuffer8,REG_TXBuffer9,REG_TXBuffer10};
 170          //unsigned char data Send_CAN_Info_ID[5]={0x08,0x55,0xe0,0x55,0x55};
 171          //unsigned char data Send_CAN_Info_ID[5]={0x01,0x55,0xe0,0x55,0x55};
 172          //unsigned char data Com_RecBuff[8]={0x01,0x02,0x03,0x4,0x05,0x06,0x07,0x08};
 173          unsigned char data Com_RecBuff[8];
 174          unsigned char bdata flag_init;
 175          //*************************
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 4   

 176          #define INBUF_LEN 8   //数据长度
 177          
 178          unsigned char inbuf1[INBUF_LEN];
 179          unsigned char checksum,count3=0;
 180          bit  read_flag=0;
 181          sbit P10=P1^0;
 182          sbit P11=P1^1;
 183          sbit P12=P1^2;
 184          sbit P13=P1^3;
 185          sbit P14=P1^4;
 186          sbit P15=P1^5;
 187          sbit P16=P1^6;
 188          sbit P17=P1^7;
 189          sbit P35=P3^5;
 190          sbit P37=P3^7;
 191          sbit P34=P3^4;
 192          //***************************
 193          sbit rcv_flag=flag_init^0;
 194          sbit err_flag=flag_init^0;
 195          sbit CS=P2^0;
 196          //sbit RECOK=P3^4;
 197          unsigned char RECOK;
 198          unsigned int msg;
 199          
 200          
 201          
 202          
 203          //向串口发送一个字符 
 204          void send_char_com(unsigned char ch)  
 205          {
 206   1          SBUF=ch;
 207   1          while(!TI);
 208   1          TI=0;
 209   1      }
 210          
 211          //向串口发送一个字符串，strlen为该字符串长度 
 212          void send_string_com(unsigned char *str,unsigned int strlen)
 213          {
 214   1          unsigned int k=0;
 215   1          do 
 216   1          {
 217   2              send_char_com(*(str + k));
 218   2              k++;
 219   2          } while(k < strlen);
 220   1      }
 221          
 222          //串口接收中断函数 
 223          #if 0
              void serial () interrupt 4 using 1 
              {  
               
                  if(RI)
                  {
                      
                      unsigned char ch;
                      RI = 0;
                      ET0=1;TR0=1;
                      ch=SBUF;
                    
                      {
                           inbuf1[count3]=ch;
                           count3=count3+1;
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 5   

                           if( count3==INBUF_LEN)
                           {
                               ET0=0;TR0=0;TH0=0xb8;TL0=0x00;//关闭定时中断，停止定时中断
                               count3=0;
                               P34=0;
                               P10=!P10;
                               P11=!P11;
                               P12=!P12;
                               P13=!P13;
                               CAN_Send_anylength(inbuf1,8);
                               memset(inbuf1,0,8);
                               
                           }
                      
                  }
                  }
              }
              #endif
 256          
 257          
 258          
 259          
 260          //***********************************************************************
 261          /************************************************************************
 262          *函数原型: bit BCAN_SET_OUTCLK( unsigned char Clock_Out)               *
 263          *参数说明:                                                             *
 264          *          Clock_Out:存放时钟分频寄存器(CDR)的参数设置                 *
 265          *返回值:                                                               *
 266          *           0 ;设置成功                                                *
 267          *           1 ;设置失败                                                *
 268          *说明:设置SJA1000的时钟分频 。该子程序只能用于复位模式                      
 269          ************************************************************************/
 270          bit BCAN_SET_OUTCLK(unsigned char Clock_Out)
 271          {
 272   1        SJA_BCANAdr=REG_CDR;           
 273   1      
 274   1        *SJA_BCANAdr=Clock_Out;        
 275   1        if(*SJA_BCANAdr != Clock_Out)
 276   1           return 1; 
 277   1         else 
 278   1           return 0;
 279   1      } 
 280          
 281          /************************************************************************
 282          *函数原型: bit BCAN_SET_OBJECT(unsigned char  BCAN_ACR0,BCAN_ACR1,BCAN_ACR2,BCAN_ACR3     
 283                                                        BCAN_AMR0, BCAN_AMR1, BCAN_AMR2, BCAN_AMR3     
 284          *参数说明:                                                              *
 285          *    BCAN_ACR(0-3):存放验收代码寄存器（ACR）的参数设置                  *
 286          *    BCAN_AMR(0-3):存放接收屏蔽寄存器（AMR）的参数设置                  *
 287          *返回值:                                                                *
 288          *           0 ;设置成功                                                 *
 289          *           1 ;设置失败                                                 *
 290          *说明:设置CAN节点的通讯对象，允许接收的报文,是由AMR和ACR共同决定的.     *
 291          *************************************************************************/ 
 292          bit BCAN_SET_OBJECT(unsigned char  BCAN_ACR0,BCAN_ACR1,BCAN_ACR2,BCAN_ACR3,BCAN_AMR0,BCAN_AMR1,BCAN_AMR2,B
             -CAN_AMR3)
 293          {
 294   1        SJA_BCANAdr=REG_TXBuffer1;     
 295   1      
 296   1        *SJA_BCANAdr=BCAN_ACR0;        //写入参数
 297   1         
 298   1        SJA_BCANAdr=REG_TXBuffer2;
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 6   

 299   1        *SJA_BCANAdr=BCAN_ACR1;
 300   1      
 301   1        SJA_BCANAdr=REG_TXBuffer3;  
 302   1        *SJA_BCANAdr=BCAN_ACR2;
 303   1         
 304   1        SJA_BCANAdr=REG_TXBuffer4; 
 305   1        *SJA_BCANAdr=BCAN_ACR3;  
 306   1       
 307   1        //校验写入值
 308   1        if(*SJA_BCANAdr != BCAN_ACR3)  return 1; 
 309   1        
 310   1        SJA_BCANAdr=REG_TXBuffer5;      
 311   1      
 312   1        *SJA_BCANAdr=BCAN_AMR0;     //写入参数
 313   1        
 314   1        SJA_BCANAdr=REG_TXBuffer6;         
 315   1        *SJA_BCANAdr=BCAN_AMR1;
 316   1      
 317   1        SJA_BCANAdr=REG_TXBuffer7; 
 318   1        *SJA_BCANAdr=BCAN_AMR2;
 319   1      
 320   1        SJA_BCANAdr=REG_TXBuffer8; 
 321   1        *SJA_BCANAdr=BCAN_AMR3;
 322   1        //校验写入值
 323   1        if(*SJA_BCANAdr != BCAN_AMR3) return 1; 
 324   1      
 325   1        return 0;
 326   1      } 
 327          
 328          /************************************************************************
 329          ;*函数原型:  bit BCAN_SET_BANDRATE(unsigned char CAN_ByteRate)          *
 330          ;*返回值:                                                               *
 331          ;*           0 ;波特率设置成功                                          *
 332          ;*           1 ;波特率设置失败                                          *
 333          ;*                                                                      * 
 334          ;*说明:设置CAN控制器SJA1000通讯波特率.SJA1000的晶振必须为16MHZ,         *
 335          ;*     其它晶体的频率的值的波特率，需自己计算 。该子程序只能用于        *
 336          ;*     复位模式                                                         *  
 337          ;************************************************************************/ 
 338          bit BCAN_SET_BANDRATE(unsigned char CAN_ByteRate)         //波特率选择
 339          {
 340   1           unsigned char BR_Num= CAN_ByteRate,BTR0_num,BTR1_num;
 341   1             switch (BR_Num)
 342   1              {
 343   2                case ByteRate_5k:
 344   2                     BTR0_num=0xBF;
 345   2                     BTR1_num=0xFF;
 346   2                     break;
 347   2                case ByteRate_10k:
 348   2                     BTR0_num=0x31;
 349   2                     BTR1_num=0x1C;
 350   2                     break;
 351   2                case ByteRate_20k:
 352   2                     BTR0_num=0x18;
 353   2                     BTR1_num=0x1C;
 354   2                     break;
 355   2                case ByteRate_40k  :
 356   2                     BTR0_num=0x87;
 357   2                     BTR1_num=0xff;
 358   2                     break;
 359   2                case ByteRate_50k:
 360   2                     //BTR0_num=0x47;
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 7   

 361   2                     //BTR1_num=0x2f;
 362   2                     BTR0_num=0x0e;
 363   2                     BTR1_num=0x1c;
 364   2                     break;
 365   2                case ByteRate_80k  :
 366   2                     //BTR0_num=0x83;
 367   2                     //BTR1_num=0xff;
 368   2                     BTR0_num=0x49;                      //ok
 369   2                     BTR1_num=0x1b;
 370   2                     break;
 371   2                case ByteRate_100k  :
 372   2                     //BTR0_num=0x43;
 373   2                     //BTR1_num=0x2f;
 374   2                     BTR0_num=0x04;                       //ok
 375   2                     BTR1_num=0x1C;
 376   2                     break;
 377   2                case ByteRate_125k  :                      //SJA1000的晶振为必须为16MHZ,波特率设置为125kpbs
 378   2                     BTR0_num=0x03;
 379   2                     BTR1_num=0x1c;
 380   2                     //BTR0_num=0x44;                        //ok
 381   2                     //BTR1_num=0x1f;
 382   2                     break;
 383   2                case ByteRate_200k  ://24MHZ
 384   2                  //   BTR0_num=0xc5;  //
 385   2                   //  BTR1_num=0xa5;
 386   2                     BTR0_num=0x43;                        //ok
 387   2                     BTR1_num=0x1b;
 388   2                     break;
 389   2                /* case ByteRate_200k  ://24MHZ
 390   2                     BTR0_num=0x81;
 391   2                     BTR1_num=0xFA;
 392   2                     break;*/
 393   2                case ByteRate_400k  :
 394   2                     BTR0_num=0x80;
 395   2                     BTR1_num=0xfa;
 396   2                     break;
 397   2                case ByteRate_500k  :
 398   2                     BTR0_num=0x01;
 399   2                     BTR1_num=0x1c;
 400   2                     break;
 401   2                case ByteRate_800k  :
 402   2                     BTR0_num=0x00;
 403   2                     BTR1_num=0x16;
 404   2                     break;
 405   2                case ByteRate_1000k  :
 406   2                     BTR0_num=0x00;
 407   2                     BTR1_num=0x14;
 408   2                     break;
 409   2                default :
 410   2                     return 1;
 411   2                     break;
 412   2              }
 413   1      
 414   1          SJA_BCANAdr=REG_BTR0;
 415   1          *SJA_BCANAdr=BTR0_num;
 416   1          if(*SJA_BCANAdr!=BTR0_num)
 417   1            {return 1;}
 418   1          SJA_BCANAdr=REG_BTR1;
 419   1          *SJA_BCANAdr=BTR1_num;
 420   1          if(*SJA_BCANAdr!=BTR1_num)
 421   1            {return 1;}
 422   1          return 0;
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 8   

 423   1      }
 424          /************************************************************************
 425           *函数原型: bit BCAN_SET_CONTROL(unsigend char CMD)                     *
 426           *参数说明: 设置控制寄存器                                              *
 427           ************************************************************************/
 428          bit BCAN_SET_CONTROL(unsigned char CMD)
 429          {  unsigned char TempData;
 430   1       
 431   1        SJA_BCANAdr=REG_CONTROL;   //SJA_BaseAdr+0x00  控制寄存器
 432   1        TempData=  *SJA_BCANAdr; 
 433   1       
 434   1        *SJA_BCANAdr=CMD;
 435   1       
 436   1        if (*SJA_BCANAdr == CMD)
 437   1          return 0;
 438   1        else
 439   1          return 1;
 440   1      
 441   1      }
 442          /************************************************************************
 443           *函数原型:  bit   BCAN_CREATE_COMMUNATION(void)                        * 
 444           *参数说明:  无                                                         *
 445           *返回值:                                                               *
 446           *           0 ; 表示SJA1000接口正常                                    *
 447           *           1 ; 表示SJA1000与处理器接口不正常                          *
 448           *说明:该函数用于检测CAN控制器的接口是否正常                            *
 449           ************************************************************************/
 450           bit BCAN_CREATE_COMMUNATION(void)
 451           {  
 452   1          SJA_BCANAdr=REG_TEST;      
 453   1          *SJA_BCANAdr=0xaa;       //写入测试值
 454   1          if(*SJA_BCANAdr == 0xaa)
 455   1             return 0;            //读测试正确
 456   1          else
 457   1             return 1;
 458   1           
 459   1       }
 460          
 461           /************************************************************************
 462           *函数原型:      bit   BCAN_ENTER_RETMODEL(void)                        *
 463           *参数说明:  无                                                         *
 464           *返回值:                                                               *
 465           *           0 ; 表示成功进入复位工作模式                               *
 466           *           1 ; 表示不能进入复位工作模式                               *
 467           *                                                                      * 
 468           *说明:      CAN控制器进入复位工作模式                                  *
 469           ************************************************************************/ 
 470           bit   BCAN_ENTER_RETMODEL(void)     //置位复位请求
 471           {
 472   1          unsigned   char   TempData;
 473   1          SJA_BCANAdr  = REG_CONTROL;   
 474   1      
 475   1        TempData=  *SJA_BCANAdr;       
 476   1          *SJA_BCANAdr=0x09;                 //置位复位请求 和单滤波模式
 477   1          if((*SJA_BCANAdr&0x01) == 1)
 478   1           return   0;
 479   1          else
 480   1            return   1;   
 481   1       } 
 482          /************************************************************************
 483           *函数原型:   BCAN_CMD_PRG(unsigned char cmd)                           *
 484           *参数说明:  unsigned char cmd                                          *
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 9   

 485           *返回值:                                                               *
 486           *           0 ; 请求成功                                               *
 487           *           1 ; 请求失败                                               *
 488           *                                                                      * 
 489           *说明:      启动命令字                                                 *
 490           ************************************************************************/
 491          bit  BCAN_CMD_PRG(unsigned char cmd)
 492           {
 493   1         SJA_BCANAdr=REG_COMMAND;            //访问地址指向命令寄存器
 494   1         *SJA_BCANAdr=cmd;                   //启动命令字
 495   1       
 496   1         switch(cmd)
 497   1         {    case  TR_CMD:                    
 498   2      
 499   2                 return    0;
 500   2                 break;
 501   2      
 502   2        case  SRR_CMD:      
 503   2      
 504   2            return 0;
 505   2           break;
 506   2          
 507   2        case  AT_CMD:                  
 508   2      
 509   2                  SJA_BCANAdr = REG_STATUS;   //访问地址指向状态寄存器   
 510   2                 if((*SJA_BCANAdr & 0x20)==0) //判断是否正在发送
 511   2                   return  0;
 512   2                 else
 513   2                   return  1;              
 514   2                 break; 
 515   2           case  RRB_CMD:                   
 516   2                 SJA_BCANAdr = REG_STATUS;   //访问地址指向状态寄存器   
 517   2                 if((*SJA_BCANAdr & 0x01)==1)
 518   2                    return  1;
 519   2                 else           
 520   2                    return  0;               
 521   2                 break;  
 522   2           case  COS_CMD:                  
 523   2      
 524   2                 SJA_BCANAdr = REG_STATUS;   
 525   2                 if((*SJA_BCANAdr & 0x02)==0)//判断清除超载是否成功
 526   2                   return  0; 
 527   2                 else
 528   2                   return  1;             
 529   2                 break; 
 530   2           default:
 531   2                   return  1;
 532   2                   break; 
 533   2         }
 534   1      }
 535          
 536          /****************************************************
 537          **函数原型：  void ex0_int(void) interrupt 0 //using 1
 538          **功    能：  中断接收函数
 539          **入口参数:   无 
 540          **出口参数:   RevceData[]数组   
 541          **说    明:   当sja1000 收到正确的报文时,会产生int中断           
 542          *****************************************************/
 543          void ex0_int(void) interrupt 0 using 1
 544          {  
 545   1       unsigned char tt,tt1,length,i;
 546   1      
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 10  

 547   1       return;
 548   1       msg++;
 549   1       if(msg==5)
 550   1        {
 551   2        msg=0;
 552   2        P34=0;
 553   2        P10=!P10;
 554   2        P11=!P11;
 555   2        P12=!P12;
 556   2        P13=!P13;
 557   2        P14=!P14;
 558   2        P15=!P15;
 559   2        P16=!P16;
 560   2        P17=!P17;
 561   2        }    
 562   1       SJA_BCANAdr=REG_INTERRUPT;
 563   1       if((*SJA_BCANAdr)&0x01)                   //产生了接收中断
 564   1       {  
 565   2          SJA_BCANAdr=REG_RXBuffer1;
 566   2          tt=*SJA_BCANAdr;
 567   2          tt1=*SJA_BCANAdr;
 568   2          length=tt1&0x0F;
 569   2           if ((tt&0x40)!=0x40)                   //数据帧   = 为远程帧
 570   2           {  
 571   3           SJA_BCANAdr =REG_RXBuffer4 ;           //宏定义的变量不能memcpy(RevceData,REG_RXBuffer4,8); 
 572   3           
 573   3           memcpy(RevceData,SJA_BCANAdr,length);  //功能：由src所指内存区域复制count个字节到dest所指内存区域
 574   3          //memcpy(Com_RecBuff,RevceData,8);      //测试用的主要是把接收到的数据在发出去，验证数据的正确
 575   3                                                  //以下代码是发送到串
 576   3          for(i=0;i<length;i++)
 577   3           send_char_com(RevceData[i]);
 578   3          /* send_char_com(RevceData[0]);
 579   3           send_char_com(RevceData[1]);           
 580   3           send_char_com(RevceData[2]);
 581   3           send_char_com(RevceData[3]);
 582   3           send_char_com(RevceData[4]);
 583   3           send_char_com(RevceData[5]);
 584   3           send_char_com(RevceData[6]);
 585   3           send_char_com(RevceData[7]);*/
 586   3           
 587   3          // RECOK=1;                              //测试用的主要是把接收到的数据在发出去，验证数据的正确
 588   3           }
 589   2      
 590   2           BCAN_CMD_PRG(RRB_CMD);                  //释放SJA1000接收缓冲区，****已经修改
 591   2      
 592   2       }
 593   1      } 
 594          
 595          unsigned char BCAN_DATA_WRITE(unsigned char *SendDataBuf)
 596           {  unsigned char temp;
 597   1         
 598   1          SJA_BCANAdr = REG_STATUS;    
 599   1          temp=*SJA_BCANAdr;
 600   1      
 601   1          if ((temp&0x08)==0) return  1;    //上次发送未完成
 602   1          if ((temp&0x04)==0) return  2;    //发送缓冲区是否锁定 
 603   1          if ((temp&0x10)==0x10) return 3;  //判断是否正在接收   
 604   1      
 605   1          SJA_BCANAdr = REG_RXBuffer1;      //访问地址指向发送缓冲区1,修改成头文件
 606   1      
 607   1          memcpy(SJA_BCANAdr,SendDataBuf,4);   
 608   1          BCAN_CMD_PRG(TR_CMD);             //请求发送         
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 11  

 609   1          return 0;
 610   1      }
 611          //CAN发送任意长度字节
 612          void CAN_Send_anylength(unsigned char *CAN_TX_Buf,unsigned char length1)
 613          {
 614   1              unsigned char temptt;
 615   1              loop:
 616   1          SJA_BCANAdr = REG_STATUS;    
 617   1               temptt=*SJA_BCANAdr; 
 618   1              //temptt=Read_SJA1000(REG_STATUS);
 619   1              if((temptt&0x04)==0x00)  goto loop;               //循环检测等待                       
 620   1              //可以向发送缓冲器写数据
 621   1              {
 622   2          SJA_BCANAdr = REG_RXBuffer1;      //访问地址指向发送缓冲区1,修改成头文件
 623   2          *SJA_BCANAdr=length1;  
 624   2          SJA_BCANAdr = REG_RXBuffer2;      //访问地址指向发送缓冲区1,修改成头文件
 625   2          *SJA_BCANAdr=0x00;  
 626   2           SJA_BCANAdr = REG_RXBuffer3;     //访问地址指向发送缓冲区1,修改成头文件
 627   2          *SJA_BCANAdr=0x00;
 628   2          SJA_BCANAdr = REG_RXBuffer4; 
 629   2          memcpy(SJA_BCANAdr,CAN_TX_Buf,length1);   
 630   2              //数据发送请求
 631   2          BCAN_CMD_PRG(TR_CMD);            //请求发送  
 632   2              }
 633   1      }
 634          
 635          /****************************************************
 636          **函数原型：   bit Sja_1000_Init(void)
 637          **功    能：   初始化SJA10000
 638          **入口参数:    无 
 639          **返 回 值:     
 640                0： 初始化成功 
 641                1： 复位失败 
 642                2:  测试sja1000失败 
 643                3： 设置失败 
 644                4： 设置验收滤波器失败
 645                5： 设置波特率失败     
 646          *****************************************************/
 647          
 648          unsigned char Sja_1000_Init(void)
 649          {
 650   1       bit s; 
 651   1       EA=0;                                 //关总中断
 652   1         s=BCAN_ENTER_RETMODEL();
 653   1       if (s==1) return 1; 
 654   1          s=BCAN_CREATE_COMMUNATION();       //建立通信
 655   1          if (s==1) return 2;
 656   1      
 657   1        s=BCAN_SET_OUTCLK(0x88);             //Pelican
 658   1       if (s==1) return 3;
 659   1      
 660   1       s=BCAN_SET_OBJECT(0xFF,0x4E,0x16,0x00,0xff,0xff,0xff,0xff);//屏蔽寄存器，都设为无关，接收所有报文 
 661   1                                                                  //当屏蔽位为1，不滤波，0就滤波必须相等
 662   1       //s=BCAN_SET_OBJECT(0x55,0xe0,0xaa,0xa1,0x00,0x00,0xff,0xff);//验收码&屏蔽码
 663   1      
 664   1       if (s==1) return 4;
 665   1      
 666   1       s=BCAN_SET_BANDRATE(ByteRate_125k);    //设置波特率200K 24MHZ
 667   1          if (s==1) return 5;
 668   1          
 669   1       SJA_BCANAdr=REG_OCR ;                  //输出控制寄存器  
 670   1          *SJA_BCANAdr=0x1a;        
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 12  

 671   1          SJA_BCANAdr=REG_INTENABLE;      
 672   1      
 673   1         *SJA_BCANAdr=0x1D;                  //设置中断，接收和发送中断
 674   1          
 675   1          // s=BCAN_SET_CONTROL(0x08);
 676   1          SJA_BCANAdr=REG_CONTROL;            //退出 复位模式
 677   1          *SJA_BCANAdr=*SJA_BCANAdr&0xfe;
 678   1           if(*SJA_BCANAdr!=0x00)
 679   1           return 6;
 680   1      
 681   1       //if (s==1) return 6;
 682   1      
 683   1          EA=1;
 684   1       return 0;   
 685   1      } 
 686          //***************************************************
 687          
 688          //初始化cpu
 689          
 690          //**************************************************
 691          void Init_Cpu(void)                                  //单片机初始化,开放外部中断0
 692          {
 693   1           //PX0=1;
 694   1           EX0=1;
 695   1          //IT0=0;
 696   1          // EA=1;
 697   1      }
 698          
 699          /****************************************************
 700          **函数原型：   void main(void)
 701          **功    能：   主程序部分:
 702          **入口参数:    无 
 703          **返 回 值:     
 704          *****************************************************/
 705          unsigned char a;
 706          int flag = 0;
 707          
 708          
 709          void rs485SetModeRx()
 710          {
 711   1              //P17=0; //output
 712   1      
 713   1      #if 0
                      P11=0;
                      P12=0;
                      P13=0;
                      P14=0;
                      P15=0;
                      P16=0;
              #endif  
 721   1              
 722   1              
 723   1              P37=0; //output
 724   1      }
 725          
 726          void rs485SetModeTx()
 727          {
 728   1              //P17=1; //output
 729   1              P37=1; //output
 730   1      
 731   1      #if 0
                      P11=1;
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 13  

                      P12=1;
                      P13=1;
                      P14=1;
                      P15=1;
                      P16=1;
              #endif  
 739   1      }
 740          
 741          unsigned char num = 0;
 742          
 743          void serial() interrupt 4
 744          {
 745   1              static int flag_local = 0;
 746   1              //P1=SBUF;
 747   1              num++;
 748   1              a=SBUF;
 749   1              flag=1;
 750   1              RI=0;
 751   1      
 752   1      
 753   1              if (a == 0xa)
 754   1              {
 755   2                      flag_local=0; //enable
 756   2                      #if 0
                              P10=0;
                              P11=0;
                              P12=0;
                              P13=0;
                              P14=0;
                              P15=0;
                              P16=0;
                              P17=0;
              #endif
 766   2      
 767   2                      //P1=0;
 768   2      
 769   2      
 770   2      
 771   2              }
 772   1              else if (a == 0xb)
 773   1              {
 774   2                      flag_local=1; //disable
 775   2      
 776   2      #if 0
                              P10=1;
                              P11=1;
                              P12=1;
                              P13=1;
                              P14=1;
                              P15=1;
                              P16=1;
                              P17=1;
              #endif
 786   2                      //P1=0x1;
 787   2      
 788   2              }
 789   1              else
 790   1              {
 791   2      
 792   2      #if 1
 793   2                      if (flag_local)
 794   2                      {
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 14  

 795   3                              P1 |= (0x1 << a);
 796   3                      }
 797   2                      else //enable --> set to 0
 798   2                      {
 799   3                              P1 &= ~(0x1 << a);
 800   3                      }
 801   2      
 802   2      #endif
 803   2              
 804   2              }
 805   1              
 806   1              
 807   1              
 808   1              
 809   1              #if 0
              
                      P10=flag_local;
                      P11=flag_local;
                      P12=flag_local;
                      P13=flag_local;
                      P14=flag_local;
                      P15=flag_local;
                      P16=flag_local;
                      P17=flag_local;
              #endif
 820   1      
 821   1      #if 0   
                      
                      if (flag_local)
                      {
                              P1 &= ~(1 << a);
                              
                              
                      }
                      else
                      {
                              P1 |= (1<<a);
                      }
                      
                      
              
              #endif
 837   1      
 838   1      
 839   1              
 840   1      }
 841          
 842          /************************************************************************
 843          *函数原型: void init_serialcomm(void)            *
 844          *参数说明: 串口初始化                            *                                                        
             -     *
 845          *说明:     设值单片机的定时器1的方式选择波特率 。该子程序只能用于复位模式                      
 846          ************************************************************************/
 847          void init_serialcomm(void)
 848          {
 849   1      #if 1
 850   1              SCON  = 0x50;       //SCON: serail mode 1, 8-bit UART, enable ucvr 
 851   1          TMOD |= 0x20;       //TMOD: timer 1, mode 2, 8-bit reload 
 852   1          PCON |= 0x80;       //SMOD=1; 
 853   1          TH1   = 0xF3;       //Baud:4800  fosc=12MHz  
 854   1          TL1   = 0xF3;       //baud:4800
 855   1      
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 15  

 856   1              //TH1   = 0xF4;       //Baud:4800  fosc=11.0592MHz  
 857   1          //TL1   = 0xF4;       //baud:4800
 858   1      
 859   1              //TH1   = 0xF9;       //Baud:9600  fosc=12MHz  
 860   1          //TL1   = 0xF9;       //baud:9600     
 861   1          IE   |= 0x90;       //Enable Serial Interrupt 
 862   1          TR1   = 1;          // timer 1 run 
 863   1      #endif
 864   1      
 865   1              //ES=1;
 866   1      }
 867          
 868          
 869          
 870          void setTimer(void)
 871          {
 872   1      
 873   1              
 874   1      
 875   1              TH0=0x3c;
 876   1              TL0=0xaf;  //50MS定时初值（T0计时用）
 877   1      
 878   1      
 879   1              
 880   1      }
 881          
 882          //定时器0初始化
 883          void timer0initial()
 884          {
 885   1              TMOD |= 0x1;        //工作方式16位定时计数器
 886   1              setTimer();
 887   1                      
 888   1          ET0=1;
 889   1              TR0=1;
 890   1      }
 891          
 892          //int timer_flag = 0;
 893          //int timer_count = 0;
 894          
 895          //定时器0中断,不够8个就在此发送
 896          void time_intt0(void) interrupt 1 using 2
 897          {
 898   1              static int timer_flag = 0;
 899   1              static int timer_count = 0;
 900   1              setTimer();
 901   1              if (timer_count == 6)
 902   1              {
 903   2              
 904   2                      timer_flag = !timer_flag;
 905   2                      P35=timer_flag;
 906   2                      //P10=timer_flag;
 907   2      
 908   2                      timer_count = 0;
 909   2              }
 910   1              else
 911   1              {
 912   2                      timer_count++;
 913   2              }
 914   1      
 915   1      
 916   1              
 917   1      }
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 16  

 918          
 919          
 920          void delay_ms(int t)
 921          {
 922   1           int i,j;
 923   1           for (i=0;i<t;i++)
 924   1              for(j=0;j<33;j++) 
 925   1              ;
 926   1          
 927   1      }
 928          void delay10ms(void) //延时程序
 929          
 930          {
 931   1      
 932   1            unsigned char i,j;
 933   1      
 934   1            for(i=20;i>0;i--)
 935   1      
 936   1            for(j=248;j>0;j--);
 937   1      
 938   1      }
 939          
 940          
 941          void delay_s(unsigned char t)
 942          {
 943   1              unsigned int i,j;
 944   1              for(i=0;i<t;i++)
 945   1              {
 946   2                      for(j=0;j<0xffff;j++)
 947   2                              ;
 948   2              }
 949   1              
 950   1      }
 951          
 952          
 953          
 954          void setSomething(void)
 955          {
 956   1              static int flag = 0;
 957   1      
 958   1              flag = !flag;
 959   1      
 960   1              //P10=flag;
 961   1              P35=flag;
 962   1      
 963   1      }
 964          
 965          void main(void)
 966          {  
 967   1              int test = 0x4f;
 968   1              
 969   1              CS=0;                //片选择引脚
 970   1              EA=0;
 971   1              Init_Cpu(); 
 972   1      
 973   1              init_serialcomm();     //初始化串口 
 974   1      
 975   1              timer0initial();
 976   1      
 977   1              EA=1; //初始化成功，开总中断
 978   1      
 979   1              P1 = 0xff;
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 17  

 980   1      
 981   1              rs485SetModeRx();
 982   1      
 983   1      
 984   1              
 985   1              //rs485SetModeTx();
 986   1      
 987   1              //rs485SetModeTx();
 988   1      
 989   1              //次标识位可以作为，串口接收完，置标志然后发送出去或者当作按键发送******
 990   1              while(1) 
 991   1              {
 992   2                      //delay_ms(500);
 993   2                      //P11=0;
 994   2                      //setSomething();
 995   2                      
 996   2              
 997   2      #if 0
                              delay_ms(5000);
                              P11=0;
              
                              delay_ms(5000);
                              P12=0;
              
                              delay_ms(5000);
                              P13=0;
              
                              delay_ms(5000);
                              P14=0;
              
                              delay_s(1);
                              P15=0;
              
              
                              delay_s(2);
                              P16=0;
                              delay_ms(10000);
                              P11=1;
                              P12=1;
                              P13=1;
                              P14=1;
                              P15=1;
                              P16=1;
              #endif
1024   2      
1025   2      #if 1   
1026   2                      if(flag==1)
1027   2                      {
1028   3                              rs485SetModeTx();
1029   3                      
1030   3                              ES=0;
1031   3                              flag=0;
1032   3                              SBUF=0xa;
1033   3                              
1034   3                              while(!TI);
1035   3                              TI=0;
1036   3      #if 1
1037   3                              SBUF=0xb;
1038   3                              while(!TI);
1039   3                              TI=0;
1040   3                              
1041   3      
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 18  

1042   3                              SBUF=0xc;
1043   3                              while(!TI);
1044   3                              TI=0;
1045   3      
1046   3                              SBUF=num;
1047   3                              while(!TI);
1048   3                              TI=0;
1049   3      
1050   3                              SBUF=num;
1051   3                              while(!TI);
1052   3                              TI=0;
1053   3      
1054   3                              
1055   3                      
1056   3      
1057   3                              SBUF=a;
1058   3                              while(!TI);
1059   3                              TI=0;
1060   3      
1061   3      
1062   3                              SBUF='#';
1063   3                              while(!TI);
1064   3                              TI=0;
1065   3      
1066   3      #if 1
1067   3                              SBUF=P1;
1068   3                              while(!TI);
1069   3                              TI=0;
1070   3                              SBUF='#';
1071   3                              while(!TI);
1072   3                              TI=0;
1073   3      #endif                  
1074   3      #endif                  
1075   3      
1076   3                              ES=1;
1077   3      
1078   3                              
1079   3      
1080   3                              //delay_ms(5000);
1081   3                              //delay_ms(5000);
1082   3                              //delay_ms(5000);
1083   3      
1084   3                              //delay_ms(100);
1085   3      
1086   3                              rs485SetModeRx();
1087   3                              
1088   3                      }
1089   2      #endif
1090   2      
1091   2              }
1092   1      
1093   1      }
1094          
1095          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1325    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     59      27
C51 COMPILER V7.50   MAIN                                                                  08/18/2013 16:12:05 PAGE 19  

   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
